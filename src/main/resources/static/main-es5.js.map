{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/admin/admin.component.ts","webpack:///src/app/components/admin/admin.component.html","webpack:///src/app/components/company-details/company-details.component.ts","webpack:///src/app/components/company-details/company-details.component.html","webpack:///src/app/components/company/company.component.ts","webpack:///src/app/components/company/company.component.html","webpack:///src/app/components/company/update-coupon2/update-coupon2.component.ts","webpack:///src/app/components/company/update-coupon2/update-coupon2.component.html","webpack:///src/app/components/coupon-display/coupon-display.component.ts","webpack:///src/app/components/coupon-display/coupon-display.component.html","webpack:///src/app/components/customer-details/customer-details.component.ts","webpack:///src/app/components/customer-details/customer-details.component.html","webpack:///src/app/components/customer/customer.component.ts","webpack:///src/app/components/customer/customer.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/image-dialog/image-dialog.component.ts","webpack:///src/app/components/image-dialog/image-dialog.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/not-found/not-found.component.ts","webpack:///src/app/components/not-found/not-found.component.html","webpack:///src/app/components/toolbar/toolbar.component.ts","webpack:///src/app/components/toolbar/toolbar.component.html","webpack:///src/app/components/update-company/update-company.component.ts","webpack:///src/app/components/update-company/update-company.component.html","webpack:///src/app/components/update-customer/update-customer.component.ts","webpack:///src/app/components/update-customer/update-customer.component.html","webpack:///src/app/components/user-details/user-details.component.ts","webpack:///src/app/components/user-details/user-details.component.html","webpack:///src/app/error-handler.interceptor.ts","webpack:///src/app/models/category.enum.ts","webpack:///src/app/models/company.ts","webpack:///src/app/models/coupon.ts","webpack:///src/app/models/customer.ts","webpack:///src/app/services/admin.service.ts","webpack:///src/app/services/company.service.ts","webpack:///src/app/services/customer.service.ts","webpack:///src/app/services/login.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","multi","declarations","providers","bootstrap","AdminComponent","service","fb","snack","dialog","addCompanyForm","group","name","required","email","password","addCustomerForm","firstName","lastName","searchCustomerForm","companyEmail","undefined","getAllCompanies","subscribe","comps","companies","messageForUser","err","console","log","error","getCompanyByEmail","res","Array","alert","controls","value","getAllCustomers","cusz","customers","getCustomerByEmail","company","dialogConfig","autoFocus","restoreFocus","data","dataToSend","dialogRef","open","afterClosed","customer","deleteCompany","showSnack","splice","indexOf","deleteCustomer","c","addCompany","formReset","addCustomer","snackRef","duration","onAction","dismiss","form","reset","Object","forEach","key","get","setErrors","searchCompanies","searchCustomers","CompanyDetailsComponent","getCompanyDetails","CompanyComponent","defaultImage","categoryList","today","Date","addCouponForm","category","description","price","min","startDate","pastValidator","endDate","amount","image","searchCouponForm","searchBy","searchCat","searchMaxPrice","cat","maxPrice","getCouponsByCategory","coupons","getCouponsBelowPrice","getCompanyCoupons","coupon","disableClose","deleteCoupon","addCoupon","maxHeight","maxWidth","imageUrl","control","yesterday","setDate","getDate","pastError","searchCoupons","openCompanyDetails","UpdateCoupon2Component","toJSON","split","updateCouponForm","updateCoupon","updateCouponMessage","close","CouponDisplayComponent","purchaseCoupon","couponMessage","openImage","CustomerDetailsComponent","getCustomerDetails","CustomerComponent","filteredCoupons","getAllCoupons","filter","length","max","parseFloat","getCustomerCoupons","ngOnInit","openCustomerDetails","HomeComponent","router","videoPlaying","navigate","openLoginDialog","ImageDialogComponent","LoginComponent","loginForm","client","login","token","sessionStorage","setItem","loggedIn","errorMessage","logout","removeItem","NotFoundComponent","ToolbarComponent","loginService","UpdateCompanyComponent","updateCompanyForm","updateCompany","UpdateCustomerComponent","updateCustomerForm","updateCustomer","UserDetailsComponent","customerService","companyService","ErrorHandlerInterceptor","request","next","handle","pipe","status","Category","Company","Coupon","Customer","AdminService","post","getItem","responseType","put","providedIn","CompanyService","CustomerService","LoginService","clientType","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AdminComponent } from './components/admin/admin.component';\nimport { CompanyComponent } from './components/company/company.component';\nimport { CustomerComponent } from './components/customer/customer.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\n\n\nconst routes: Routes = [\n  { path: \"main\", component: HomeComponent },\n  { path: \"login\", component: LoginComponent },\n  { path: \"admin\", component: AdminComponent },\n  { path: \"company\", component: CompanyComponent },\n  { path: \"customer\", component: CustomerComponent },\n  { path: \"\", redirectTo: \"main\", pathMatch: \"full\" },\n  { path: \"**\", component: NotFoundComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { LoginService } from './services/login.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CouponSystemWebsite';\n\n\n\n  constructor(){}\n\n}\n","<div>\n  <app-toolbar></app-toolbar>\n<main>\n<router-outlet></router-outlet>\n</main>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { ReactiveFormsModule} from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\";\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AdminComponent } from './components/admin/admin.component';\nimport { CompanyComponent } from './components/company/company.component';\nimport { CustomerComponent } from './components/customer/customer.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { UpdateCoupon2Component } from './components/company/update-coupon2/update-coupon2.component';\nimport { ImageDialogComponent } from './components/image-dialog/image-dialog.component';\nimport { UserDetailsComponent } from './components/user-details/user-details.component';\nimport { CustomerDetailsComponent } from './components/customer-details/customer-details.component';\nimport { CouponDisplayComponent } from './components/coupon-display/coupon-display.component';\nimport { ToolbarComponent } from './components/toolbar/toolbar.component';\nimport { ErrorHandlerInterceptor } from './error-handler.interceptor';\nimport { UpdateCompanyComponent } from './components/update-company/update-company.component';\nimport { UpdateCustomerComponent } from './components/update-customer/update-customer.component';\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    AdminComponent,\n    CompanyComponent,\n    CustomerComponent,\n    HomeComponent,\n    LoginComponent,\n    NotFoundComponent,\n    UpdateCoupon2Component,\n    ImageDialogComponent,\n    UserDetailsComponent,\n    CustomerDetailsComponent,\n    CouponDisplayComponent,\n    ToolbarComponent,\n    UpdateCompanyComponent,\n    UpdateCustomerComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    ReactiveFormsModule,\n    MatSliderModule,\n    MatCheckboxModule,\n    MatSlideToggleModule,\n    MatBadgeModule,\n    MatSelectModule,\n    MatAutocompleteModule,\n    MatTooltipModule,\n    MatSnackBarModule,\n    MatDialogModule,\n    FormsModule,\n    MatTabsModule,\n  ],\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorHandlerInterceptor, multi: true }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { Customer } from 'src/app/models/customer';\nimport { Company } from 'src/app/models/company';\nimport { Coupon } from 'src/app/models/coupon';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { UpdateCompanyComponent } from '../update-company/update-company.component';\nimport { UpdateCustomerComponent } from '../update-customer/update-customer.component';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  constructor(private service: AdminService, private fb: FormBuilder, private snack: MatSnackBar, private dialog:MatDialog) { }\n\n  customers: Customer[];\n  companies: Company[];\n  companyEmail: string;\n  coupons: Coupon[];\n\n  addCompanyForm: FormGroup;\n  searchCompanyForm: FormGroup\n  addCustomerForm: FormGroup;\n  searchCustomerForm: FormGroup;\n\n  messageForUser: string;\n\n\n  ngOnInit(): void {\n    this.addCompanyForm = this.fb.group({\n      name: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n\n    this.addCustomerForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n\n    // this.searchCompanyForm = this.fb.group({\n    //   email: ['']\n    // });\n\n    this.searchCustomerForm = this.fb.group({\n      email: ['']\n    });\n\n   \n  }\n\n  searchCompanies() {\n    // if (this.searchCompanyForm.controls['email'].value == '') {\n    if (this.companyEmail == '' || this.companyEmail == null || this.companyEmail == undefined) {\n      this.service.getAllCompanies().subscribe((comps) => {\n        this.companies = comps;\n        this.messageForUser = null;\n      }, (err) => {\n        console.log(err);\n        this.messageForUser = err.error;\n      });\n    } else {\n      // this.service.getCompanyByEmail(this.searchCompanyForm.controls['email'].value).subscribe((res) => {\n      this.service.getCompanyByEmail(this.companyEmail).subscribe((res) => {\n        this.companies = new Array(1);\n        this.companies[0] = res;\n        this.messageForUser = null;\n      }, (err) => {\n        this.messageForUser = err.error;\n        alert(err.error);\n      })\n\n    }\n  }\n\n  searchCustomers() {\n    if (this.searchCustomerForm.controls['email'].value == '') {\n      this.service.getAllCustomers().subscribe((cusz) => {\n        this.customers = cusz;\n        this.messageForUser = null;\n      }, (err) => {\n        this.messageForUser = err.error;\n        alert(err.error);\n      });\n    } else {\n      this.service.getCustomerByEmail(this.searchCustomerForm.controls['email'].value).subscribe((res) => {\n        this.customers = new Array(1);\n        this.customers[0] = res;\n        this.messageForUser = null;\n      }, (err) => {\n        this.messageForUser = err.error;\n        alert(err.error);\n      })\n    }\n  }\n\n  editCompany(company: Company) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.restoreFocus = true;\n    dialogConfig.data = {\n      dataToSend: company\n    };\n    const dialogRef = this.dialog.open(UpdateCompanyComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((data) => {\n      if (data == undefined)\n        return;\n      company = data;\n      console.log(data);\n      console.log(company);\n    })\n  }\n\n  editCustomer(customer: Customer) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.restoreFocus = true;\n    dialogConfig.data = {\n      dataToSend: customer\n    };\n    const dialogRef = this.dialog.open(UpdateCustomerComponent, dialogConfig);\n    dialogRef.afterClosed().subscribe((data) => {\n      if (data == undefined)\n        return;\n      customer = data;\n      console.log(data);\n      console.log(customer);\n    })\n  }\n\n\n\n  deleteCompany(company: Company) {\n    this.service.deleteCompany(company.id).subscribe((res) => {\n      this.messageForUser = res;\n      this.showSnack();\n      this.companies.splice(this.companies.indexOf(company), 1);\n    }, (err) => {\n      this.messageForUser = err.error;\n      alert(err.error);\n    });\n  }\n\n\n\n\n  deleteCustomer(customer: Customer) {\n    this.service.deleteCustomer(customer.id).subscribe((res) => {\n      this.messageForUser = res;\n      this.showSnack();\n      this.customers.splice(this.customers.indexOf(customer), 1);\n    }, (err) => {\n      this.messageForUser = err.error;\n      alert(err.error);\n    });\n  }\n\n  addCompany() {\n    let c = new Company(0, this.addCompanyForm.controls['name'].value, this.addCompanyForm.controls['password'].value,\n      this.addCompanyForm.controls['email'].value, null)\n    this.service.addCompany(c).subscribe((res) => {\n      this.messageForUser = res;\n      this.showSnack();\n      this.formReset(this.addCompanyForm);\n    }, (err) => {\n      this.messageForUser = err.error;\n      alert(err.error);\n    });\n  }\n\n  addCustomer() {\n    let c = new Customer(0, this.addCustomerForm.controls['firstName'].value, this.addCustomerForm.controls['lastName'].value,\n      this.addCustomerForm.controls['email'].value, this.addCustomerForm.controls['password'].value, null)\n    this.service.addCustomer(c).subscribe((res) => {\n      this.messageForUser = res;\n      this.showSnack();\n      this.formReset(this.addCustomerForm);\n    }, (err) => {\n      this.messageForUser = err.error;\n      alert(err.error);\n    });\n  }\n\n  showSnack() {\n    let snackRef = this.snack.open(this.messageForUser, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    })\n  }\n\n  formReset(form: FormGroup) {\n\n    form.reset();\n\n    Object.keys(form.controls).forEach(key => {\n      form.get(key).setErrors(null) ;\n    });\n}\n\n}\n","<div class=\"grid-container\">\n    <mat-tab-group >\n    <mat-tab label=\"Companies\">\n        <!-- <form action=\"POST\" [formGroup]=\"searchCompanyForm\"> -->\n            <form action=\"POST\">\n            <button mat-raised-button (click)=\"searchCompanies()\">Search</button>\n            <!-- <button mat-raised-button *ngIf=\"searchCompanyForm.controls['email'].value!=''\" (click)=\"searchOneCompany()\">Search One</button> -->\n            <mat-form-field>\n                <mat-label>Email</mat-label>\n                <!-- <input type=\"text\" matInput formControlName=\"email\"> -->\n                <input type=\"text\" matInput [(ngModel)]=\"companyEmail\" [ngModelOptions]=\"{standalone: true}\">\n                <mat-error>Email not legit</mat-error>\n            </mat-form-field>\n        </form><br>\n    <table>\n        <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Password</th>\n        </tr>\n        <tr *ngFor=\"let c of companies\">\n            <td>{{c.name}}</td>\n            <td>\n                <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.email \"> -->\n                <span>{{c.email}}</span>\n            </td>\n            <td>\n                <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.password \"> -->\n                <span>{{c.password}}</span>\n            </td>\n            <button mat-raised-button *ngIf=\"!c.editable\" (click)=\"editCompany(c)\">Edit</button>\n            <!-- <button mat-raised-button *ngIf=\"c.editable\" (click)=\"updateCompany(c)\">Update</button> -->\n            <button mat-raised-button (click)=\"deleteCompany(c)\">\n                <mat-icon>delete_outline</mat-icon>\n            </button>\n        </tr>\n    </table><br>\n</mat-tab>\n<mat-tab label=\"Customers\">\n    <form action=\"POST\" [formGroup]=\"searchCustomerForm\">\n        <button mat-raised-button (click)=\"searchCustomers()\">Search</button>\n        <mat-form-field>\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\">\n            <mat-error>Email not legit</mat-error>\n        </mat-form-field>\n    </form><br>\n    <table>\n        <tr>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Email</th>\n            <th>Password</th>\n        </tr>\n        <tr *ngFor=\"let c of customers\">\n            <td>\n                <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.firstName \"> -->\n                <span>{{c.firstName}}</span>\n            </td>\n                <td>\n                    <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.lastName \"> -->\n                    <span>{{c.lastName}}</span>\n                </td>\n            <td>\n                <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.email \"> -->\n                <span>{{c.email}}</span>\n            </td>\n            <td>\n                <!-- <input type=\"text\" *ngIf=\"c.editable\" [(ngModel)]=\"c.password \"> -->\n                <span>{{c.password}}</span>\n            </td>\n            <button mat-raised-button *ngIf=\"!c.editable\" (click)=\"editCustomer(c)\">Edit</button>\n            <!-- <button mat-raised-button *ngIf=\"c.editable\" (click)=\"updateCustomer(c)\">Update</button> -->\n            <button mat-raised-button (click)=\"deleteCustomer(c)\">\n                <mat-icon>delete_outline</mat-icon>\n            </button>\n        </tr>\n    </table><br>\n</mat-tab>\n</mat-tab-group>\n<div class=\"add\">\n    <h2>Add a Company</h2>\n    <form [formGroup]=\"addCompanyForm\"  >\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Name</mat-label>\n            <input type=\"text\" matInput formControlName=\"name\" required>\n            <mat-error>Name is required !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\" required>\n            <mat-error *ngIf=\"addCompanyForm.controls['email'].errors?.required\">Email is required !</mat-error>\n            <mat-error *ngIf=\"addCompanyForm.controls['email'].errors?.email\">Email is not legit !</mat-error>\n        </mat-form-field><br>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"text\" matInput formControlName=\"password\" required>\n            <mat-error>Password is required !</mat-error>\n        </mat-form-field><br>\n        <button mat-raised-button type=\"submit\" [disabled]=\"!addCompanyForm.valid\" (click)=\"addCompany()\">Add Company</button>\n        <br><br>\n    </form>\n    <h2>Add a Customer</h2>\n    <form [formGroup]=\"addCustomerForm\" >\n        <mat-form-field appearance =\"outline\">\n            <mat-label>First Name</mat-label>\n            <input type=\"text\" matInput formControlName=\"firstName\" required>\n            <mat-error>First Name is required !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Last Name</mat-label>\n            <input type=\"text\" matInput formControlName=\"lastName\" required>\n            <mat-error>Last Name is required !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\" required>\n            <mat-error *ngIf=\"addCustomerForm.controls['email'].errors?.required\">Email is required !</mat-error>\n            <mat-error *ngIf=\"addCustomerForm.controls['email'].errors?.email\">Email is not legit !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"text\" matInput formControlName=\"password\" required>\n            <mat-error>Password is required !</mat-error>\n        </mat-form-field><br>\n        <!-- <span>{{addCustomerMessage}}</span><br> -->\n        <button mat-raised-button [disabled]=\"!addCustomerForm.valid\" (click)=\"addCustomer()\">Add Customer</button>\n        <br><br>\n    </form>\n</div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { Company } from 'src/app/models/company';\n\n@Component({\n  selector: 'app-company-details',\n  templateUrl: './company-details.component.html',\n  styleUrls: ['./company-details.component.css']\n})\nexport class CompanyDetailsComponent implements OnInit {\n\n  constructor(private service:CompanyService) { }\n\n  company:Company;\n\n  ngOnInit(): void {\n      this.service.getCompanyDetails().subscribe((res) => {\n        this.company = res;\n      },(err)=>{\n        alert(err.error);\n        console.log(err.error);\n      });\n  }\n\n}\n","<div>\n    <h1>Company Details</h1>\n    <span>Name: {{company.name}}</span>\n    <span>Email: {{company.email}}</span>\n    <span>Password: {{company.password}}</span>\n    <!-- <span>Num. of Coupons: {{company.coupons.length}}</span> -->\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Category } from 'src/app/models/category.enum';\nimport { Coupon } from 'src/app/models/coupon';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { UpdateCoupon2Component } from './update-coupon2/update-coupon2.component';\nimport { ImageDialogComponent } from '../image-dialog/image-dialog.component';\nimport { Company } from 'src/app/models/company';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { CompanyDetailsComponent } from '../company-details/company-details.component';\n\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent implements OnInit {\n\n  constructor(private service: CompanyService, private fb: FormBuilder, private dialog: MatDialog, private snack: MatSnackBar) { }\n\n  addCouponForm: FormGroup;\n  searchCouponForm: FormGroup;\n\n  messageForUser: string;\n\n  defaultImage: string = \"assets/placeholder-image.jpg\";\n\n  coupons: Coupon[];\n  company: Company;\n\n  categoryList = Category;\n  keys = Object.keys(this.categoryList);\n\n  today: Date = new Date();\n  \n\n  ngOnInit(): void {\n    this.addCouponForm = this.fb.group({\n      title: ['', Validators.required],\n      category: ['', Validators.required],\n      description: ['', Validators.required],\n      price: ['', [Validators.required, Validators.min(1)]],\n      startDate: ['', [Validators.required,this.pastValidator]],\n      endDate: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(1)]],\n      image: ['']\n    });\n\n    this.searchCouponForm = this.fb.group({\n      searchBy: [''],\n      searchCat: ['', Validators.required],\n      searchMaxPrice: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n\n  searchCoupons() {\n    let searchBy = this.searchCouponForm.controls['searchBy'].value;\n    let cat = this.searchCouponForm.controls['searchCat'].value;\n    let maxPrice = this.searchCouponForm.controls['searchMaxPrice'].value;\n    switch (searchBy) {\n      case 'category':\n        if (cat == '' || cat == null) { break; }\n        this.service.getCouponsByCategory(cat).subscribe((res) => {\n          this.coupons = res;\n        }, (err) => {\n          alert(err.error);\n          console.log(err.error);\n        });\n        break;\n      case 'maxPrice':\n        if (maxPrice == '' || maxPrice == null) { break; }\n        this.service.getCouponsBelowPrice(maxPrice).subscribe((res) => {\n          this.coupons = res;\n        }, (err) => {\n          alert(err.error);\n          console.log(err.error);\n        });\n        break;\n      default:\n        this.service.getCompanyCoupons().subscribe((res) => {\n          this.coupons = res;\n          console.log(res);\n        }, (err) => {\n          console.log(err.error);\n          alert(err.error);\n        });\n    }\n  }\n\n  editCoupon(coupon: Coupon) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.autoFocus = true;\n    dialogConfig.restoreFocus = true;\n    dialogConfig.disableClose = true;\n    dialogConfig.data = {\n      dataToSend: coupon\n    };\n    const dialogRef = this.dialog.open(UpdateCoupon2Component, dialogConfig);\n    dialogRef.afterClosed().subscribe((data) => {\n      if (data == undefined)\n        return;\n      coupon = data;\n      console.log(data);\n      console.log(coupon);\n    })\n  }\n\n  deleteCoupon(coupon: Coupon) {\n    this.service.deleteCoupon(coupon.id).subscribe((res) => {\n      this.messageForUser = res;\n      this.coupons.splice(this.coupons.indexOf(coupon), 1);\n      this.showSnack();\n    }, (err) => {\n      alert(err.error);\n      console.log(err.error);\n    });\n  }\n\n  addCoupon() {\n    let title = this.addCouponForm.controls['title'].value;\n    let cat = this.addCouponForm.controls['category'].value;\n    let description = this.addCouponForm.controls['description'].value;\n    let price = this.addCouponForm.controls['price'].value;\n    let startDate = this.addCouponForm.controls['startDate'].value;\n    if (startDate < this.today) {\n      alert('can not pick a start date before today !')\n      return;\n    }\n    let endDate = this.addCouponForm.controls['endDate'].value;\n    if (endDate < startDate) {\n      alert('can not pick an end date sooner than the start date !')\n      return;\n    }\n    let amount = this.addCouponForm.controls['amount'].value;\n    let image = this.addCouponForm.controls['image'].value;\n    if (image == null || image == '' || image == undefined) { image = this.defaultImage }\n    let coupon: Coupon = new Coupon(0, title, cat, description, price, this.company, startDate, endDate, amount, image);\n    this.service.addCoupon(coupon).subscribe((res) => {\n      this.messageForUser = res;\n      this.showSnack();\n      this.formReset(this.addCouponForm);\n    }, (err) => {\n      alert(err.error);\n      console.log(err.error);\n    });\n  }\n\n  openCompanyDetails() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.maxHeight = '400px';\n    dialogConfig.maxWidth = '600px';\n    dialogConfig.autoFocus = true;\n    const dialogRef = this.dialog.open(CompanyDetailsComponent, dialogConfig);\n  }\n\n  formReset(form: FormGroup) {\n\n    form.reset();\n\n    Object.keys(form.controls).forEach(key => {\n      form.get(key).setErrors(null);\n    });\n  }\n\n  openImage(coupon: Coupon) {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.maxHeight = '400px';\n    dialogConfig.maxWidth = '600px';\n    dialogConfig.restoreFocus = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.data = {\n      imageUrl: coupon.image\n    };\n    const dialogRef = this.dialog.open(ImageDialogComponent, dialogConfig);\n  }\n\n  showSnack() {\n    let snackRef = this.snack.open(this.messageForUser, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    })\n  }\n\n  pastValidator(control: AbstractControl) {\n    let yesterday = new Date();\n    yesterday.setDate(yesterday.getDate()-1);\n    let startDate = new Date(control.value);\n    if (yesterday > startDate) {\n      return { pastError: true };\n    }\n  }\n\n\n}\n","<mat-tab-group>\n    <mat-tab label=\"Search Coupons\">\n        <!-- Search Coupons -->\n        <form action=\"POST\" [formGroup]=\"searchCouponForm\">\n            <button mat-raised-button (click)=\"searchCoupons()\">Search</button>\n            <mat-form-field>\n                <mat-label>Search By</mat-label>\n                <mat-select matInput formControlName=\"searchBy\">\n                    <mat-option></mat-option>\n                    <mat-option value=\"category\">Category</mat-option>\n                    <mat-option value=\"maxPrice\">Max Price</mat-option>\n                </mat-select>\n            </mat-form-field>\n            <mat-form-field *ngIf=\"searchCouponForm.controls['searchBy'].value == 'category'\">\n                <mat-label>Category</mat-label>\n                <mat-select matInput formControlName=\"searchCat\">\n                    <mat-option *ngFor=\"let cat of keys\" [value]=\"cat\">{{categoryList[cat]}}</mat-option>\n                </mat-select>\n                <mat-error>must select a category</mat-error>\n            </mat-form-field>\n            <mat-form-field *ngIf=\"searchCouponForm.controls['searchBy'].value == 'maxPrice'\">\n                <mat-label>Max Price</mat-label>\n                <input type=\"number\" matInput formControlName=\"searchMaxPrice\" min=\"1\">\n                <mat-error *ngIf=\"searchCouponForm.controls['searchMaxPrice'].errors?.required\">Price is required</mat-error>\n                <mat-error *ngIf=\"searchCouponForm.controls['searchMaxPrice'].errors?.min\">Price must be above 0</mat-error>\n            </mat-form-field>\n            <button mat-stroked-button (click)=\"openCompanyDetails()\">Company Details</button>\n        </form><br>\n        <!-- Display Coupons -->\n        <table>\n            <tr>\n                <th>Title</th>\n                <th>Category</th>\n                <th>Description</th>\n                <th>Price</th>\n                <th>Start Date</th>\n                <th>End Date</th>\n                <th>Amount</th>\n                <th>Image</th>\n            </tr>\n            <tr *ngFor=\"let c of coupons\">\n                <td><span>{{c.title}}</span></td>\n                <td><span>{{c.category}}</span></td>\n                <td><span>{{c.description}}</span></td>\n                <td><span>{{c.price}}</span></td>\n                <td><span>{{c.startDate}}</span></td>\n                <td><span>{{c.endDate}}</span></td>\n                <td><span>{{c.amount}}</span></td>\n                <td><img src={{c.image}} alt=\"wtf\" height=\"20px\" width=\"20px\" (click)=\"openImage(c)\"></td>\n                <button mat-raised-button (click)=\"editCoupon(c)\">Edit</button>\n                <button mat-raised-button (click)=\"deleteCoupon(c)\">\n                    <mat-icon>delete_outline</mat-icon>\n                </button>\n            </tr>\n        </table><br>\n    </mat-tab>\n    <mat-tab label=\"Add Coupons\">\n        <!-- Add Coupon -->\n        <h2>Add a Coupon</h2>\n        <form [formGroup]=\"addCouponForm\">\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Title</mat-label>\n                <input type=\"text\" matInput formControlName=\"title\" required>\n                <mat-error>Title is required !</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Category</mat-label>\n                <mat-select matInput formControlName=\"category\">\n                    <mat-option *ngFor=\"let cat of keys\" [value]=\"cat\">{{categoryList[cat]}}</mat-option>\n                </mat-select>\n                <mat-error>Category is required !</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Price</mat-label>\n                <input type=\"number\" matInput formControlName=\"price\" min=\"1\" required>\n                <mat-error *ngIf=\"addCouponForm.controls['price'].errors?.required\">Price is required</mat-error>\n                <mat-error *ngIf=\"addCouponForm.controls['price'].errors?.min\">Price must be above 0</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Amount</mat-label>\n                <input type=\"number\" matInput formControlName=\"amount\" min=\"1\" required>\n                <mat-error *ngIf=\"addCouponForm.controls['amount'].errors?.required\">Amount is required</mat-error>\n                <mat-error *ngIf=\"addCouponForm.controls['amount'].errors?.min\">Amount must be above 0</mat-error>\n            </mat-form-field><br>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Start Date</mat-label>\n                <input type=\"date\" matInput formControlName=\"startDate\" [min]=\"today.toJSON().split('T')[0]\" required>\n                <mat-error *ngIf=\"addCouponForm.controls['startDate'].errors?.required\">Start Date is required !</mat-error>\n                <mat-error *ngIf=\"addCouponForm.controls['startDate'].errors?.pastError\">start date cannot be in the past</mat-error>\n            </mat-form-field>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>End Date</mat-label>\n                <input type=\"date\" matInput formControlName=\"endDate\" [min]=\"addCouponForm.controls['startDate'].value\"\n                required>\n                <mat-error *ngIf=\"addCouponForm.controls['endDate'].errors?.required\">End Date is required !</mat-error>\n                <mat-error *ngIf=\"addCouponForm.errors?.eDateError\">End Date cannot be before startDate !</mat-error>\n            </mat-form-field><br>\n            <mat-form-field appearance=\"outline\" style=\"width: 500px;\">\n                <mat-label>Description</mat-label>\n                <textarea matInput formControlName=\"description\" placeholder=\"describe it...\" required></textarea>\n                <mat-error>Description is required !</mat-error>\n            </mat-form-field><br>\n            <mat-form-field appearance=\"outline\">\n                <mat-label>Image</mat-label>\n                <input type=\"text\" matInput formControlName=\"image\">\n            </mat-form-field><br>\n            <button mat-raised-button [disabled]=\"!addCouponForm.valid\" (click)=\"addCoupon()\">Add Coupon</button>\n            <br><br>\n        </form>\n    </mat-tab>\n</mat-tab-group>","import { Component, OnInit, Inject } from '@angular/core';\nimport { Category } from 'src/app/models/category.enum';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Coupon } from 'src/app/models/coupon';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { ImageDialogComponent } from '../../image-dialog/image-dialog.component';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n@Component({\n  selector: 'app-update-coupon2',\n  templateUrl: './update-coupon2.component.html',\n  styleUrls: ['./update-coupon2.component.css']\n})\nexport class UpdateCoupon2Component implements OnInit {\n\n  constructor(\n    private dialogRef: MatDialogRef<UpdateCoupon2Component>,\n    @Inject(MAT_DIALOG_DATA) data,\n    private service: CompanyService,\n    private fb: FormBuilder,\n    private snack:MatSnackBar\n    ) { this.coupon = data.dataToSend }\n\n  coupon: Coupon;\n\n  updateCouponForm: FormGroup;\n\n  updateCouponMessage: string;\n\n  today: string = new Date().toJSON().split('T')[0];\n\n  defaultImage: string = \"assets/placeholder-image.jpg\";\n\n  ngOnInit(): void {\n    this.updateCouponForm = this.fb.group({\n      title: [this.coupon.title, Validators.required],\n      description: [this.coupon.description, Validators.required],\n      price: [this.coupon.price, [Validators.required, Validators.min(1)]],\n      startDate: [this.coupon.startDate, [Validators.required,this.pastValidator]],\n      endDate: [this.coupon.endDate, Validators.required],\n      amount: [this.coupon.amount, [Validators.required, Validators.min(1)]],\n      image: [this.coupon.image]\n    });\n  }\n\n  updateCoupon() {\n    let title = this.updateCouponForm.controls['title'].value;\n    let description = this.updateCouponForm.controls['description'].value;\n    let price = this.updateCouponForm.controls['price'].value;\n    let startDate = this.updateCouponForm.controls['startDate'].value;\n    if (startDate < this.today) {\n      alert('can not pick a start date before today !')\n      return;\n    }\n    let endDate = this.updateCouponForm.controls['endDate'].value;\n    if (endDate < startDate) {\n      alert('can not pick an end date sooner than the start date !')\n      return;\n    }\n    let amount = this.updateCouponForm.controls['amount'].value;\n    let image = this.updateCouponForm.controls['image'].value;\n    if (image == null || image == '' || image == undefined) { image = this.defaultImage }\n    let coupon: Coupon = new Coupon(this.coupon.id, title, this.coupon.category, description, price, this.coupon.company, startDate, endDate, amount, image);\n    this.service.updateCoupon(coupon).subscribe((res) => {\n      this.coupon = coupon;\n      this.updateCouponMessage = res;\n      this.showSnack();\n      this.dialogRef.close(coupon);\n    }, (err) => {\n      this.updateCouponMessage = err.error;\n      alert(err.error);\n      console.log(err.error);\n    })\n\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  showSnack() {\n    let snackRef = this.snack.open(this.updateCouponMessage, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    })\n  }\n\n  pastValidator(control: AbstractControl) {\n    let yesterday = new Date();\n    yesterday.setDate(yesterday.getDate()-1);\n    let startDate = new Date(control.value);\n    if (yesterday > startDate) {\n      return { pastError: true };\n    }\n  }\n\n}\n","<h2 mat-dialog-title>Update a Coupon - <span>{{coupon.title}}</span></h2>\n<mat-dialog-content [formGroup]=\"updateCouponForm\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Title</mat-label>\n        <input type=\"text\" matInput formControlName=\"title\" required>\n        <mat-error>Title is required !</mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Price</mat-label>\n        <input type=\"number\" matInput formControlName=\"price\" min=\"1\" required>\n        <mat-error *ngIf=\"updateCouponForm.controls['price'].errors?.required\">Price is required</mat-error>\n        <mat-error *ngIf=\"updateCouponForm.controls['price'].errors?.min\">Price must be above 0</mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Amount</mat-label>\n        <input type=\"number\" matInput formControlName=\"amount\" min=\"1\" required>\n        <mat-error *ngIf=\"updateCouponForm.controls['amount'].errors?.required\">Amount is required</mat-error>\n        <mat-error *ngIf=\"updateCouponForm.controls['amount'].errors?.min\">Amount must be above 0</mat-error>\n    </mat-form-field><br>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Start Date</mat-label>\n        <input type=\"date\" matInput formControlName=\"startDate\" [min]=\"today\" required>\n        <mat-error *ngIf=\"updateCouponForm.controls['startDate'].errors?.required\">Start Date is required !</mat-error>\n        <mat-error *ngIf=\"updateCouponForm.controls['startDate'].errors?.pastError\">start date cannot be in the past</mat-error>\n    </mat-form-field>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>End Date</mat-label>\n        <input type=\"date\" matInput formControlName=\"endDate\" [min]=\"updateCouponForm.controls['startDate'].value\" required>\n        <mat-error>End Date is required !</mat-error>\n    </mat-form-field><br>\n    <mat-form-field appearance=\"outline\" style=\"width: 500px;\">\n        <mat-label>Description</mat-label>\n        <textarea matInput formControlName=\"description\" required placeholder=\"describe it...\"></textarea>\n        <mat-error>Description is required !</mat-error>\n    </mat-form-field><br>\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Image</mat-label>\n        <input type=\"text\" matInput formControlName=\"image\">\n    </mat-form-field>\n    <span>{{updateCouponMessage}}</span><br>\n    <br><br>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button type=\"submit\" mat-raised-button [disabled]=\"!updateCouponForm.valid\" (click)=\"updateCoupon()\">Update\n        !</button>\n    <button mat-raised-button (click)=\"close()\">Back</button>\n</mat-dialog-actions>","import { Component, OnInit, Input } from '@angular/core';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { Coupon } from 'src/app/models/coupon';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatDialogConfig, MatDialog } from '@angular/material/dialog';\nimport { ImageDialogComponent } from '../image-dialog/image-dialog.component';\n\n@Component({\n  selector: 'app-coupon-display',\n  templateUrl: './coupon-display.component.html',\n  styleUrls: ['./coupon-display.component.css']\n})\nexport class CouponDisplayComponent implements OnInit {\n\n  couponMessage: string;\n\n  @Input()\n  coupon: Coupon;\n\n  constructor(private service: CustomerService, private snack: MatSnackBar, private dialog:MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  purchaseCoupon() {\n    this.service.purchaseCoupon(this.coupon.id).subscribe((res) => {\n      this.couponMessage = res;\n      this.showSnack();\n      console.log(res);\n    },(err)=>{\n      alert(err.error);\n      console.log(err.error);\n    })\n  };\n\n  showSnack() {\n    let snackRef = this.snack.open(this.couponMessage, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    })\n  }\n\n  openImage() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.maxHeight = '400px';\n    dialogConfig.maxWidth = '600px';\n    dialogConfig.restoreFocus = true;\n    dialogConfig.autoFocus = true;\n    dialogConfig.data = {\n      imageUrl: this.coupon.image\n    };\n    const dialogRef = this.dialog.open(ImageDialogComponent, dialogConfig);\n  }\n\n}\n","<div>\n    <img [src]=\"coupon.image\" alt=\"wtf\" width=\"200px\" height=\"200px\" (click)=\"openImage()\">\n    <span>Title: {{coupon.title}}</span>\n    <span>Category: {{coupon.category}}</span>\n    <span>Description: {{coupon.description}}</span>\n    <span>Company: {{coupon.company.name}}</span>\n    <span>Start Date: {{coupon.startDate}}</span>\n    <span>End Date: {{coupon.endDate}}</span>\n    <span>Amount: {{coupon.amount}}</span>\n    <span>Price: {{coupon.price}}</span>\n    Buy: <button mat-raised-button (click)=\"purchaseCoupon()\">\n        <mat-icon>attach_money</mat-icon>\n    </button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { Customer } from 'src/app/models/customer';\n\n@Component({\n  selector: 'app-customer-details',\n  templateUrl: './customer-details.component.html',\n  styleUrls: ['./customer-details.component.css']\n})\nexport class CustomerDetailsComponent implements OnInit {\n\n  customer:Customer;\n\n  constructor(private service:CustomerService) { }\n\n  ngOnInit(): void {\n    this.service.getCustomerDetails().subscribe((res)=>{\n      this.customer = res;\n      console.log(res);\n    },(err)=>{\n      alert(err.error);\n      console.log(err.error);\n    })\n  }\n\n}\n","<div>\n    <h1>Customer Details</h1>\n    <span>Name: {{customer.firstName}} {{customer.lastName}}</span>\n    <span>Email: {{customer.email}}</span>\n    <span>Password: {{customer.password}}</span>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { CouponDisplayComponent } from '../coupon-display/coupon-display.component';\nimport { Coupon } from 'src/app/models/coupon';\nimport { Category } from 'src/app/models/category.enum';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Customer } from 'src/app/models/customer';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { CustomerDetailsComponent } from '../customer-details/customer-details.component';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n\n  searchCouponForm: FormGroup;\n  couponMessage: string;\n\n  coupons: Coupon[];\n  filteredCoupons: Coupon[] = new Array(0);\n\n  customer: Customer;\n\n  categoryList = Category;\n  keys = Object.keys(this.categoryList);\n\n  constructor(private service: CustomerService, private fb: FormBuilder, private snack: MatSnackBar, private dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.service.getAllCoupons().subscribe((res) => {\n      this.coupons = res;\n      console.log(res);\n    }, (err) => {\n      this.couponMessage = err.error;\n      console.log(err.error);\n    });\n\n    this.searchCouponForm = this.fb.group({\n      searchBy: [''],\n      searchCat: ['', Validators.required],\n      searchMaxPrice: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n\n  searchCoupons() {\n    this.couponMessage = '';\n    let searchBy = this.searchCouponForm.controls['searchBy'].value;\n    let cat = this.searchCouponForm.controls['searchCat'].value;\n    let maxPrice = this.searchCouponForm.controls['searchMaxPrice'].value;\n    switch (searchBy) {\n      case 'category':\n        if (cat == '' || cat == null) { break; }\n        this.filteredCoupons = this.coupons.filter(({ category }) => category == cat);\n        if (this.filteredCoupons.length == 0) {\n          this.couponMessage = \"No Coupons Found!\";\n          this.showSnack();\n        }\n        break;\n      case 'maxPrice':\n        let max = parseFloat(maxPrice);\n        this.filteredCoupons = this.coupons.filter(({ price }) => price <= max);\n        if (this.filteredCoupons.length == 0) {\n          this.couponMessage = \"No Coupons Found!\";\n          this.showSnack();\n        }\n        break;\n      case 'myCoupons':\n        this.service.getCustomerCoupons().subscribe((res)=>{\n          this.filteredCoupons = res;\n          console.log(res);\n        },(err)=>{\n          alert(err.error);\n          console.log(err.error);\n        })\n        break;\n      default: this.ngOnInit();\n    }\n  }\n\n  showSnack() {\n    let snackRef = this.snack.open(this.couponMessage, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    });\n  }\n\n  openCustomerDetails() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.maxHeight = '400px';\n    dialogConfig.maxWidth = '600px';\n    dialogConfig.autoFocus = true;\n    const dialogRef = this.dialog.open(CustomerDetailsComponent, dialogConfig);\n  }\n\n\n}\n","<!-- Search Coupons -->\n<form action=\"POST\" [formGroup]=\"searchCouponForm\" style=\"display: inline;\">\n    <button mat-raised-button (click)=\"searchCoupons()\">Search</button>\n    <mat-form-field>\n        <mat-label>Search By</mat-label>\n        <mat-select matInput formControlName=\"searchBy\">\n            <mat-option></mat-option>\n            <mat-option value=\"category\">Category</mat-option>\n            <mat-option value=\"maxPrice\">Max Price</mat-option>\n            <mat-option value=\"myCoupons\">My Coupons</mat-option>\n        </mat-select>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"searchCouponForm.controls['searchBy'].value == 'category'\">\n        <mat-label>Category</mat-label>\n        <mat-select matInput formControlName=\"searchCat\">\n            <mat-option *ngFor=\"let cat of keys\" [value]=\"cat\">{{categoryList[cat]}}</mat-option>\n        </mat-select>\n        <mat-error>must select a category</mat-error>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"searchCouponForm.controls['searchBy'].value == 'maxPrice'\">\n        <mat-label>Max Price</mat-label>\n        <input type=\"number\" matInput formControlName=\"searchMaxPrice\" min=\"1\" required>\n        <mat-error *ngIf=\"searchCouponForm.controls['searchMaxPrice'].errors?.required\">Price is required</mat-error>\n        <mat-error *ngIf=\"searchCouponForm.controls['searchMaxPrice'].errors?.min\">Price must be above 0</mat-error>\n    </mat-form-field>\n</form>\n<!-- Dispaly Customer Details -->\n<button mat-stroked-button (click)=\"openCustomerDetails()\">Customer Details</button>\n<!-- Display Coupons -->\n<div>\n    <div *ngIf=\"searchCouponForm.controls['searchBy'].value == ''||searchCouponForm.controls['searchBy'].value == null\" class=\"gridDisplay\">\n        <app-coupon-display *ngFor=\"let c of coupons\" [coupon]=\"c\"></app-coupon-display>\n    </div>\n    <div *ngIf=\"filteredCoupons.length>0 && searchCouponForm.controls['searchBy'].value != ''&&searchCouponForm.controls['searchBy'].value != null\" class=\"gridDisplay\">\n        <app-coupon-display *ngFor=\"let c of filteredCoupons\" [coupon]=\"c\"></app-coupon-display>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MatDialogConfig, MatDialog } from '@angular/material/dialog';\nimport { LoginComponent } from '../login/login.component';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\nvideoPlaying:number =1;\n\n  constructor(private router:Router, private dialog:MatDialog) { }\n\n  ngOnInit(): void {\n  }\n\n  goToLogin(){\n    this.router.navigate(['login']);\n  }\n\n   openLoginDialog() {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.maxHeight = '800px';\n    dialogConfig.maxWidth = '600px';\n    dialogConfig.restoreFocus = true;\n    dialogConfig.autoFocus = true;\n    const dialogRef = this.dialog.open(LoginComponent, dialogConfig);\n  }\n\n   nextVideo(){\n    if(this.videoPlaying<3)\n    this.videoPlaying++;\n    else this.videoPlaying=1;\n  }\n\n  \n}\n","<video autoplay id=\"v1\" *ngIf=\"videoPlaying==1\" src=\"https://www.videvo.net/videvo_files/converted/2015_05/preview/FoodPack1_12_Videvo.mov93550.webm\" (ended)=\"nextVideo()\"></video>\n<video autoplay id=\"v2\" *ngIf=\"videoPlaying==2\" src=\"https://www.videvo.net/videvo_files/converted/2017_09/preview/170804_A_Lombok_032.mp470034.webm\" (ended)=\"nextVideo()\"></video>\n<video autoplay id=\"v3\" *ngIf=\"videoPlaying==3\" src=\"https://cdn.videvo.net/videvo_files/video/free/2020-04/small_watermarked/200413_01_Cine_03_preview.webm\" (ended)=\"nextVideo()\"></video>\n\n<div class=\"header\">\nGad's Coupon Website\n</div>\n<div class=\"content\">\n<p>\n    Get All your favourite deals on Rrestaurants, Vacations, Spa's, Electronics and Fashion\n</p>\n<button mat-raised-button (click)=\"openLoginDialog()\">Login</button>\n</div>\n<!-- <p>khg,hg</p> -->","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-image-dialog',\n  templateUrl: './image-dialog.component.html',\n  styleUrls: ['./image-dialog.component.css']\n})\nexport class ImageDialogComponent implements OnInit {\n\nimage:string;\n\n  constructor(private dialogRef: MatDialogRef<ImageDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) data) {this.image = data.imageUrl }\n\n  ngOnInit(): void {\n  }\n\n}\n","    <img [src]=\"image\" alt=\"wtf\">\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ClientType } from 'src/app/models/client-type.enum';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Router } from '@angular/router';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { CompanyComponent } from '../company/company.component';\nimport { CustomerComponent } from '../customer/customer.component';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private fb: FormBuilder, private service: LoginService, private router: Router,private dialogRef: MatDialogRef<LoginComponent>) { }\n\n  loginForm: FormGroup;\n\n  errorMessage: string;\n\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      client: ['', Validators.required]\n    });\n  }\n\n  public login() {\n    this.service.login(this.loginForm.controls['email'].value, this.loginForm.controls['password'].value,\n      this.loginForm.controls['client'].value).subscribe((token) => {\n        sessionStorage.setItem('userId', token);\n        this.service.loggedIn = true;\n        switch (this.loginForm.controls['client'].value) {\n          case \"Administrator\":\n            this.router.navigate([\"admin\"]);\n            this.dialogRef.close();\n            break;\n          case \"Company\":\n            this.router.navigate([\"company\"]);\n            this.dialogRef.close();\n            break;\n          case \"Customer\":\n            this.router.navigate([\"customer\"]);\n            this.dialogRef.close();\n            break;\n        }\n      }, (err) => {\n        this.errorMessage = err.error;\n        console.log(err.error);\n      });\n  }\n\n  logout(){\n    this.service.logout().subscribe((res)=>{\n      sessionStorage.removeItem('userId');\n      this.service.loggedIn = false;\n      alert(res);\n      this.router.navigate([\"main\"]);\n    },(err)=>{\n      alert(err.error);\n    })\n  };\n\n}\n","<div>\n    <h1>Login</h1>\n    <form [formGroup]=\"loginForm\" >\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\" required>\n            <mat-error *ngIf=\"loginForm.controls['email'].errors?.required\">Email is required !</mat-error>\n            <mat-error *ngIf=\"loginForm.controls['email'].errors?.email\">Email is not legit !</mat-error>\n        </mat-form-field><br><br>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"text\" matInput formControlName=\"password\" required>\n            <mat-error>Password is required !</mat-error>\n        </mat-form-field><br><br>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Who are you?</mat-label>\n            <!-- <mat-select [formControl]=\"clientSelect\" formControlName=\"client\" > -->\n                <mat-select matInput formControlName=\"client\" >\n             <mat-option value=\"Administrator\">Administrator</mat-option>\n            <mat-option value=\"Company\">Company</mat-option>\n            <mat-option value=\"Customer\">Customer</mat-option>\n            </mat-select>\n        </mat-form-field><br><br>\n        <span>{{errorMessage}}</span><br><br>\n        <button mat-raised-button [disabled]=\"!loginForm.valid\" (click)=\"login()\">Login</button>\n        <br><br>\n    </form>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n    <img src=\"./assets/404.jpg\" alt=\"wtf\">\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/services/login.service';\nimport { Router } from '@angular/router';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { ClientType } from 'src/app/models/client-type.enum';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Component({\n  selector: 'app-toolbar',\n  templateUrl: './toolbar.component.html',\n  styleUrls: ['./toolbar.component.css']\n})\nexport class ToolbarComponent implements OnInit {\n\n  \n  constructor(public loginService:LoginService, private router:Router) { }\n \n\n  ngOnInit(): void {\n  }\n\n  logout(){\n    this.loginService.logout().subscribe((res)=>{\n      sessionStorage.removeItem('userId');\n      this.loginService.loggedIn = false;\n      alert(res);\n      this.router.navigate([\"main\"]);\n    },(err)=>{\n      alert(err.error);\n    })\n  };\n\n  openUserDetails(){\n\n  }\n\n\n}\n","<div>\n    <mat-toolbar color=\"primary\">\n        Coupon Website\n       <span class=\"toolbar-fill\"></span>\n       <!-- <mat-menu #companyMenu=\"matMenu\">\n         <button mat-menu-item (click)=\"openUserDetails()\">Company Details</button>\n         <button mat-menu-item (click)=\"logout()\">Logout</button>\n       </mat-menu>\n       <mat-menu #customerMenu=\"matMenu\">\n        <button mat-menu-item (click)=\"openUserDetails()\">Customer Details</button>\n        <button mat-menu-item (click)=\"logout()\">Logout</button>\n      </mat-menu> -->\n      <!-- <mat-menu #userMenu=\"matMenu\">\n        <button mat-menu-item (click)=\"openUserDetails()\">View Details</button>\n        <button mat-menu-item (click)=\"logout()\">Logout</button>\n      </mat-menu> -->\n       <!-- <button mat-stroked-button *ngIf=\"loginService.loggedIn==true && loginService.userName!=undefined && loginService.userName!=null\" [matMenuTriggerFor]=\"userMenu\">Hello {{userName}}</button>\n      <div *ngIf=\"loginService.loggedIn==true\">\n        <button mat-stroked-button *ngIf=\"(userName | async) as userName\" [matMenuTriggerFor]=\"userMenu\"> Hello {{userName}} </button>\n      </div> -->\n        <button *ngIf=\"loginService.loggedIn==true\" (click)=\"logout()\">\n        <mat-icon>exit_to_app</mat-icon>\n      </button>\n      </mat-toolbar>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { Company } from 'src/app/models/company';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-update-company',\n  templateUrl: './update-company.component.html',\n  styleUrls: ['./update-company.component.css']\n})\nexport class UpdateCompanyComponent implements OnInit {\n\n  company:Company;\n\n  updateCompanyForm:FormGroup;\n\n  messageForUser:string;\n\n  constructor(private dialogRef: MatDialogRef<UpdateCompanyComponent>,\n    @Inject(MAT_DIALOG_DATA) data,private fb:FormBuilder, private service:AdminService, private snack:MatSnackBar) {this.company = data.dataToSend }\n\n  ngOnInit(): void {\n    this.updateCompanyForm =this.fb.group({\n      email:[this.company.email,[Validators.required,Validators.email]],\n      password: [this.company.password,Validators.required]\n    });\n  }\n\n   \n    updateCompany() {\n      let company = new Company(this.company.id,this.company.name,this.updateCompanyForm.controls['password'].value,\n      this.updateCompanyForm.controls['email'].value,this.company.coupons);\n      this.service.updateCompany(company).subscribe((res) => {\n        this.messageForUser = res;\n        this.showSnack();\n        this.dialogRef.close(company);\n      }, (err) => {\n        alert(err.error);\n      });\n    }\n\n    \n  showSnack() {\n    let snackRef = this.snack.open(this.messageForUser, \"close\", { duration: 2000 });\n    snackRef.onAction().subscribe(() => {\n      //do your stuff here !\n      this.snack.dismiss();\n    })\n  }\n\n}\n","<div>\n    <h2>Update a Company - {{company.name}}</h2>\n    <form [formGroup]=\"updateCompanyForm\"  >\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\" required>\n            <mat-error *ngIf=\"updateCompanyForm.controls['email'].errors?.required\">Email is required !</mat-error>\n            <mat-error *ngIf=\"updateCompanyForm.controls['email'].errors?.email\">Email is not legit !</mat-error>\n        </mat-form-field><br>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"text\" matInput formControlName=\"password\" required>\n            <mat-error>Password is required !</mat-error>\n        </mat-form-field><br>\n        <button mat-raised-button type=\"submit\" [disabled]=\"!updateCompanyForm.valid\" (click)=\"updateCompany()\">Update !</button>\n        <br><br>\n    </form>\n</div>\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Customer } from 'src/app/models/customer';\nimport { AdminService } from 'src/app/services/admin.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-update-customer',\n  templateUrl: './update-customer.component.html',\n  styleUrls: ['./update-customer.component.css']\n})\nexport class UpdateCustomerComponent implements OnInit {\n\n  customer:Customer;\n\n  updateCustomerForm:FormGroup;\n\n  messageForUser:string;\n  \n  constructor(private dialogRef: MatDialogRef<UpdateCustomerComponent>,\n    @Inject(MAT_DIALOG_DATA) data,private fb:FormBuilder, private service:AdminService, private snack:MatSnackBar) {this.customer = data.dataToSend }\n\n  ngOnInit(): void {\n    this.updateCustomerForm =this.fb.group({\n      firstName:[this.customer.firstName,Validators.required],\n      lastName:[this.customer.lastName,Validators.required],\n      email:[this.customer.email,[Validators.required,Validators.email]],\n      password: [this.customer.password,Validators.required]\n    });\n  }\n\n    updateCustomer() {\n      let customer = new Customer(this.customer.id,this.updateCustomerForm.controls['firstName'].value,\n      this.updateCustomerForm.controls['lastName'].value,this.updateCustomerForm.controls['email'].value,\n      this.updateCustomerForm.controls['password'].value,this.customer.coupons);\n      this.service.updateCustomer(customer).subscribe((res) => {\n        this.messageForUser = res;\n        this.showSnack();\n        this.dialogRef.close(customer);\n      }, (err) => {\n        alert(err.error);\n      });\n    }\n\n    showSnack() {\n      let snackRef = this.snack.open(this.messageForUser, \"close\", { duration: 2000 });\n      snackRef.onAction().subscribe(() => {\n        //do your stuff here !\n        this.snack.dismiss();\n      })\n    }\n\n}\n","<div>\n    <h2>Update a Customer - {{customer.firstName}} {{customer.lastName}}</h2>\n    <form [formGroup]=\"updateCustomerForm\" >\n        <mat-form-field appearance =\"outline\">\n            <mat-label>First Name</mat-label>\n            <input type=\"text\" matInput formControlName=\"firstName\" required>\n            <mat-error>First Name is required !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Last Name</mat-label>\n            <input type=\"text\" matInput formControlName=\"lastName\" required>\n            <mat-error>Last Name is required !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance =\"outline\">\n            <mat-label>Email</mat-label>\n            <input type=\"text\" matInput formControlName=\"email\" required>\n            <mat-error *ngIf=\"updateCustomerForm.controls['email'].errors?.required\">Email is required !</mat-error>\n            <mat-error *ngIf=\"updateCustomerForm.controls['email'].errors?.email\">Email is not legit !</mat-error>\n        </mat-form-field>\n        <mat-form-field appearance=\"outline\">\n            <mat-label>Password</mat-label>\n            <input type=\"text\" matInput formControlName=\"password\" required>\n            <mat-error>Password is required !</mat-error>\n        </mat-form-field><br>\n        <button mat-raised-button [disabled]=\"!updateCustomerForm.valid\" (click)=\"updateCustomer()\">Update !</button>\n        <br><br>\n    </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CustomerService } from 'src/app/services/customer.service';\nimport { CompanyService } from 'src/app/services/company.service';\nimport { Company } from 'src/app/models/company';\nimport { Customer } from 'src/app/models/customer';\n\n@Component({\n  selector: 'app-user-details',\n  templateUrl: './user-details.component.html',\n  styleUrls: ['./user-details.component.css']\n})\nexport class UserDetailsComponent implements OnInit {\n\ncompany:Company;\ncustomer:Customer;\n\n  constructor(private customerService:CustomerService, private companyService:CompanyService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>user-details works!</p>\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { retry, catchError} from 'rxjs/operators';\nimport { LoginService } from './services/login.service';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n\n  constructor(private service: LoginService, private router: Router) { }\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request)\n      .pipe(\n        retry(0),\n        catchError((error: HttpErrorResponse) => {\n          let errorMessage = '';\n          if ( error.status === 504 || error.error == 'Session Expired !'||error.error == \"You have to Login hombre !\") {\n            errorMessage = `You are not logged in ! \\n redirecting to home...`;\n            this.service.loggedIn = false;\n            sessionStorage.removeItem('userId');\n            this.router.navigate(['main']);\n            alert(errorMessage);\n          } else {\n            return throwError(error);\n          }\n        })\n      );\n  }\n}\n","export enum Category {\n\n    Spa=\"Spa\",Food=\"Food\",Vacation=\"Vacation\",Electronics=\"Electronics\",Clothes=\"Clothes\",Shoes=\"Shoes\",Restaurants=\"Restaurants\"\n\n}\n","import { Coupon } from './coupon';\n\nexport class Company {\n//try to use getters and setters\nconstructor(\n    public id: number,\n    public name: string,\n    public password: string,\n    public email: string,\n    public coupons: Coupon[]){}\n    // public editable:boolean =false;\n    \n    public get_coupons(): Coupon[] {\n        return this.coupons;\n    }\n    public set_coupons(coupons: Coupon[]) {\n        this.coupons = coupons;\n    }\n\n    public get_email(): string {\n        return this.email;\n    }\n    public set_email(email: string) {\n        this.email = email;\n    }\n\n    public get_password(): string {\n        return this.password;\n    }\n    public set_password(password: string) {\n        this.password = password;\n    }\n\n    public getName(): string {\n        return this.name;\n    }\n    public set_name(name: string) {\n        this.name = name;\n    }\n\n\n    public getid(): number {\n        return this.id;\n    }\n    public set_id(id: number) {\n        this.id = id;\n    }\n\n}\n","import { Company } from './company';\nimport { Category } from './category.enum';\n\nexport class Coupon {\n\n    constructor(\n    public id :number,\n    public title : string,\n    public category : Category,\n    public description : string,\n    public price : number,\n    public company : Company,\n    public startDate : Date,\n    public endDate : Date,\n    public amount : number,\n    public image : string,\n    ){}\n    \n    \n    public get _category() : Category {\n        return this.category;\n    }\n    public set _category(category : Category) {\n        this.category = category;\n    }\n    \n    public get _price() : number {\n        return this.price;\n    }\n    public set _price(price : number) {\n        this.price = price;\n    }\n    \n    public get _image() : string {\n        return this.image;\n     } \n    public set _image(image : string) {\n        this.image = image;\n    }\n    \n    public get _amount() : number {\n        return this.amount;\n    }\n    public set _amount(amount : number) {\n        this.amount = amount;\n    }\n    \n    public get _endDate() : Date {\n        return this.endDate;\n    }\n    public set _endDate(endDate : Date) {\n        this.endDate = endDate;\n    }\n    \n    public get _startDate() : Date {\n        return this.startDate;\n    }\n    public set _startDate(startDate : Date) {\n        this.startDate = startDate;\n    }\n    \n    public get _description() : string {\n        return this.description;\n    }\n    public set _description(description : string) {\n        this.description = description;\n    }\n    \n    public get _title() : string {\n        return this.title;\n    }\n    public set _title(title : string) {\n        this.title = title;\n    }\n    \n    public get _company() : Company {\n        return this.company;\n    }\n    public set _company(company : Company) {\n        this.company = company;\n    }\n    \n    public get _id() :number {\n        return this.id;\n    }\n    public set _id(id :number) {\n        this.id = id;\n    }\n    \n}\n","import { Coupon } from './coupon';\n\nexport class Customer {\n\n    constructor(\n        public id: number,\n        public firstName: string,\n        public lastName: string,\n        public email: string,\n        public password: string,\n        public coupons: Coupon[]) { }\n        // public editable:boolean =false;\n\n\n        get _id():number{\n            return this.id;\n        }\n\n        get _firstName():string{\n            return this.firstName;\n        }\n\n        get _lastName():string{\n            return this.lastName;\n        }\n\n        get _email():string{\n            return this.email;\n        }\n\n        get _password():string{\n            return this.password;\n        }\n\n        get _coupons():Coupon[]{\n            return this.coupons;\n        }\n\n        set_id(id:number){\n            this.id = id;\n        }\n\n        set_firstName(firstName:string){\n            this.firstName = firstName;\n        }\n\n        set_lastName(lastName:string){\n         this.lastName = lastName;\n        }\n\n        set_email(email:string){\n         this.email = email;\n        }\n\n        set_password(password:string){\n            this.password = password;\n        }\n\n        set_coupons(coupons:Coupon[]){\n            this.coupons = coupons;\n        }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Company } from '../models/company';\nimport { Customer } from '../models/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  constructor(private client: HttpClient) { }\n\n  addCompany(company: Company) {\n    return this.client.post(\"http://localhost:8080/admin/addCompany/\" + sessionStorage.getItem('userId'), company,{responseType:'text'});\n  }\n\n  updateCompany(company: Company) {\n    //is it post or put??\n    return this.client.put(\"http://localhost:8080/admin/updateCompany/\" + sessionStorage.getItem('userId'), company,{responseType:'text'});\n  }\n\n  deleteCompany(id: number) {\n    return this.client.delete(\"http://localhost:8080/admin/deleteCompany/\" + id + \"/\" + sessionStorage.getItem('userId'), { responseType: 'text' });\n  }\n\n  getAllCompanies() {\n    return this.client.get<Company[]>(\"http://localhost:8080/admin/getAllCompanies/\" + sessionStorage.getItem('userId'));\n  }\n\n  getCompany(id: number) {\n    return this.client.get<Company>(\"http://localhost:8080/admin/getOneCompany/\" + id + \"/\" + sessionStorage.getItem('userId'));\n  }\n\n  getCompanyByEmail(email: string) {\n    return this.client.get<Company>(\"http://localhost:8080/admin/getCompanyByEmail/\" + email + \"/\" + sessionStorage.getItem('userId'));\n  }\n\n  addCustomer(customer: Customer) {\n    return this.client.post(\"http://localhost:8080/admin/addCustomer/\" + sessionStorage.getItem('userId'), customer,{responseType:'text'});\n  }\n\n  updateCustomer(customer: Customer) {\n    return this.client.put(\"http://localhost:8080/admin/updateCustomer/\" + sessionStorage.getItem('userId'), customer,{responseType:'text'});\n  }\n\n  deleteCustomer(id: number,) {\n    return this.client.delete(\"http://localhost:8080/admin/deleteCustomer/\" + id + \"/\" + sessionStorage.getItem('userId'), { responseType: 'text' });\n  }\n\n  getAllCustomers() {\n    return this.client.get<Customer[]>(\"http://localhost:8080/admin/getAllCustomers/\" + sessionStorage.getItem('userId'));\n  }\n\n  getCustomer(id: number) {\n    return this.client.get<Customer>(\"http://localhost:8080/admin/getOneCustomer/\" + id + \"/\" + sessionStorage.getItem('userId'));\n  }\n\n  getCustomerByEmail(email: string) {\n    return this.client.get<Customer>(\"http://localhost:8080/admin/getCustomerByEmail/\" + email + \"/\" + sessionStorage.getItem('userId'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Coupon } from '../models/coupon';\nimport { Category } from '../models/category.enum';\nimport { Company } from '../models/company';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyService {\n\n  constructor(private client:HttpClient) { }\n\n  addCoupon(coupon:Coupon){\n    return this.client.post(\"http://localhost:8080/company/addCoupon/\"+sessionStorage.getItem('userId'),coupon,{responseType:'text'});\n  }\n\n  updateCoupon(coupon:Coupon){\n    return this.client.put(\"http://localhost:8080/company/updateCoupon/\"+sessionStorage.getItem('userId'),coupon,{responseType:'text'});\n  }\n\n  deleteCoupon(id:number){\n    return this.client.delete(\"http://localhost:8080/company/deleteCoupon/\"+id+\"/\"+sessionStorage.getItem('userId'),{responseType:'text'});\n  }\n\n  getCompanyCoupons(){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/getCoupons/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCouponsByCategory(category:Category){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/getCouponsByCategory/\"+category+\"/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCouponsBelowPrice(price:number){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/getCouponsBelowPrice/\"+price+\"/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCoupon(id:number){\n    return this.client.get<Coupon>(\"http://localhost:8080/company/getOneCoupon/\"+id+\"/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCompanyDetails(){\n    return this.client.get<Company>(\"http://localhost:8080/company/getCompanyDetails/\"+sessionStorage.getItem('userId'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Coupon } from '../models/coupon';\nimport { Category } from '../models/category.enum';\nimport { Customer } from '../models/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  constructor(private client:HttpClient) { }\n\n  purchaseCoupon(id:number){\n     return this.client.get(\"http://localhost:8080/customer/purchaseCoupon/\"+id+\"/\"+sessionStorage.getItem('userId'),{responseType:'text'});\n  }\n\n  getAllCoupons(){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/getAllCoupons/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCustomerCoupons(){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/getCustomerCoupons/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCouponsByCat(cat:Category){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/getCouponsByCat/\"+cat+\"/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCouponsByPrice(price:number){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/getCouponsByPrice/\"+price+\"/\"+sessionStorage.getItem('userId'));\n  }\n\n  getCustomerDetails(){\n    return this.client.get<Customer>(\"http://localhost:8080/customer/getCustomerDetails/\"+sessionStorage.getItem('userId'));\n   }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ClientType } from '../models/client-type.enum';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  token: string = sessionStorage.getItem('userId');\n\n  loggedIn: boolean = this.token != null && this.token.length > 10;\n\n\n\n  constructor(private client: HttpClient) { }\n\n  login(email: string, password: string, clientType: string) {\n    return this.client.get(\"http://localhost:8080/login/\" + email + \"/\" + password + \"/\" + clientType, { responseType: 'text' });\n  }\n\n  logout() {\n    return this.client.get(\"http://localhost:8080/login/logout/\" + this.token, { responseType: 'text' });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}